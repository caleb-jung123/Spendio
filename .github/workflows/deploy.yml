name: deploy
on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: deploy
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Get runner IP and create NSG rule
        run: |
          RUNNER_IP=$(curl -s https://api.ipify.org)
          echo "Runner IP: $RUNNER_IP"
          echo "RUNNER_IP=$RUNNER_IP" >> $GITHUB_ENV
          
          # Create unique rule name with timestamp
          RULE_NAME="GitHubActions-$(date +%s)"
          echo "RULE_NAME=$RULE_NAME" >> $GITHUB_ENV
          
          # Add IP to Azure NSG
          az network nsg rule create \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --nsg-name ${{ secrets.AZURE_NSG_NAME }} \
            --name $RULE_NAME \
            --protocol Tcp \
            --priority 100 \
            --destination-port-range ${{ secrets.SSH_PORT }} \
            --source-address-prefix $RUNNER_IP \
            --access Allow \
            --direction Inbound \
            --description "GitHub Actions temporary SSH access"

      - name: Debug runner IP and connectivity
        run: |
          echo "Runner public IP: $RUNNER_IP"
          echo "Testing connectivity to SSH host:"
          nc -zv ${{ secrets.SSH_HOST }} ${{ secrets.SSH_PORT }} || echo "Connection failed"
          echo "DNS resolution:"
          nslookup ${{ secrets.SSH_HOST }} || echo "DNS lookup failed"

      - name: Prepare SSH and known_hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Remote deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd ${{ secrets.PROJECT_PATH }}
            git fetch --all
            git reset --hard origin/main

            # activate venv (tries venv/, then env/)
            if [ -f venv/bin/activate ]; then 
                source venv/bin/activate
                echo "Activated venv/ virtual environment"
            elif [ -f env/bin/activate ]; then 
                source env/bin/activate
                echo "Activated env/ virtual environment"
            else
                echo "No virtual environment found, creating one..."
                python3 -m venv venv
                source venv/bin/activate
                echo "Created and activated new venv/ virtual environment"
            fi

            pip install -r backend/requirements.txt
            
            export DJANGO_SETTINGS_MODULE=backend.settings
            python backend/manage.py migrate --noinput
            python backend/manage.py collectstatic --noinput

            cd frontend
            npm ci
            npm run build

            echo "Restarting spendio service..."
            sudo /usr/bin/systemctl restart spendio || {
                echo "Failed to restart spendio service. Checking status..."
                sudo systemctl status spendio.service
                echo "Recent logs:"
                sudo journalctl -u spendio.service --no-pager -n 20
                exit 1
            }
            echo "Spendio service restarted successfully"
            
            echo "Testing nginx configuration..."
            timeout 10 sudo nginx -t || {
                echo "Nginx configuration test failed or timed out."
                echo "This might be due to sudo password requirement or nginx config issues."
                echo "Continuing deployment..."
            }
            
            echo "Reloading nginx..."
            timeout 10 sudo /usr/bin/systemctl reload nginx || {
                echo "Failed to reload nginx or timed out."
                echo "This might be due to sudo password requirement."
                echo "Please manually run: sudo systemctl reload nginx"
            }
            echo "Nginx reloaded successfully"
            echo "Deployment completed successfully!"

      - name: Remove runner IP from Azure NSG
        if: always()  # This ensures it runs even if deployment fails
        run: |
          if [ -n "$RULE_NAME" ]; then
            az network nsg rule delete \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --nsg-name ${{ secrets.AZURE_NSG_NAME }} \
              --name $RULE_NAME || echo "Failed to remove NSG rule - check Azure portal"
          fi
